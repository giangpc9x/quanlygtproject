<?xml version="1.0" encoding="utf-8" ?>
<Demos Name="HeThongThiGiayPhepLaiXe" ColumnCount="3" Title="Hệ Thống Thi Giấy Phép Lại Xe Đường Bộ" TitleFormatString="{2} - {0}">
    <DemoGroup Text="Trang chủ" Caption="Build Your Best - Without Limits or Compromise" BeginCategory="true">
        <Demo Text="Bảng điều kiển" NavigateUrl="~/Default.aspx" UseFullTitle="false" Title="Hệ thống sát hạch giấy phép lại xe đường bộ">
            <GeneralTerms ShowHeader="false">
                <p>
                    <b>Giới thiệu hệ thống</b>
                </p>

                <p>
                    These adjectives help describe our new <b>ASPxGridView</b> but you will find that our competitors use the same phrases to describe their product offerings. So how do you decide who's telling the truth and which product delivers on its promises? How can you be certain that the hassles and frustrations you've encountered in the past with ASP.NET controls will not be repeated just because a tool vendor tells you their approach is better?
                </p>

                <p>Fact is that no amount of marketing can hide the limitations of a product and as such, the best way to determine whether a given product addresses your business needs and those of your customers is to try it. If you currently own a competing ASP.NET grid and data editors library or if you are in the evaluation process, we invite you to download and evaluate the ASPxGridView Suite - and decide for yourself.</p>

                <p>
                    The demos contained within these web pages lay out our evidence - that the <b>ASPxGridView</b> has no equal in the marketplace…but you are both the judge and jury and we welcome your thoughts and look forward to your feedback.
                </p>
                <br/>
                <hr noshade="noshade" />
                <p>
                    Below you will find hot-button features that frankly every single one of our competitors claims they offer. We'd be remiss if we did not mention them as well, but before you read about these features, please indulge us for a brief moment so we can mention the two attributes we feel to be most important - SPEED and MEMORY FOOTPRINT.
                </p>

                <p>When we set out to re-write our ASP.NET grid and data editors library, our mission was rather simple: Create a grid control that is fast - really fast and not a memory hog. A grid that will not choke and collapse on itself when the dataset contains 50,000 or more rows... A grid that will not make end-users cringe as they load a page and then attempt to navigate from page to page... A grid that fully exploits data operations against the database server, so features such as sorting, grouping, filtering and summary computations can actually be responsive rather than atrociously slow.</p>

                <p>
                    YES, the <b>ASPxGridView</b> is all about maximizing SPEED and conserving MEMORY. All the big ticket features a company claims to have in their grid are worthless without these. With that said, here is a general overview of all features you can expect to find when evaluating the <b>ASPxGridView and Editors Library</b>:
                </p>
            </GeneralTerms>
            <Description>
                To view any of the demos within these web pages, use the menu on the left hand side of this page. If you would like to explore the capabilities of these libraries further, we offer a free evaluation version and all of our products are backed by a 60 day no questions asked money back guarantee. For assistance, feel free to contact us at <a href="mailto:support@devexpress.com">support@devexpress.com</a>.
            </Description>
        </Demo>
    </DemoGroup>

    <DemoGroup Text="Quản lý hệ thống" ImageUrl="~/Images/TitleImages/GridView.png" ImageWidth="76px" ImageHeight="76px" BeginCategory="true">
        <Demo Text="Quản lý người dùng" NavigateUrl="~/HeThong/qlnguoidung.aspx" Section="1" Title="Quản lý người sử dụng hệ thống">
            <GeneralTerms ShowHeader="false">
                
            </GeneralTerms>
            <Description>
            </Description>
        </Demo>
        <Demo Text="Quản lý nhóm người dùng" NavigateUrl="~/HeThong/qlnhomnguoidung.aspx" Section="2" Title="Quản lý nhóm người sử dụng hệ thống">
            <GeneralTerms ShowHeader="false">
               
            </GeneralTerms>
            <Description>
            </Description>
        </Demo>       
    </DemoGroup>

    <DemoGroup Text="Quản lý đề thi" ImageUrl="~/Images/TitleImages/GridView.png" ImageWidth="76px" ImageHeight="76px">
        <Demo Text="Quản lý câu hỏi" NavigateUrl="~/qlch/Grouping.aspx" Title="Outlook Style Data Grouping - AJAX Grid Control for ASP.NET">
            <Description>
              
            </Description>
        </Demo>
        <Demo Text="Quản lý loại câu hỏi" NavigateUrl="~/qlch/IntervalGrouping.aspx" Title="Advanced Data Grouping - AJAX DataGrid for ASP.NET">
            <Description>
           
            </Description>
        </Demo>
        <Demo Text="Quản lý loại bằng lái" NavigateUrl="~/qlch/Sorting.aspx" Title="Data Sorting - ASP.NET Grid Control">
            <Description>
              
            </Description>
        </Demo>
    </DemoGroup>
  
    <DemoGroup Text="Điểm Thi" ImageUrl="~/Images/TitleImages/GridView.png" ImageWidth="76px" ImageHeight="76px">
        <Demo Text="Thông tin điểm thi" NavigateUrl="~/DiemThi/diemthi.aspx" Title="Danh sách các điểm thi bằng lái xe">
            <Description>
            
            </Description>
        </Demo>
        <Demo Text="Thông tin phòng thi" NavigateUrl="~/dt/LinqDataSource.aspx" Title="Bind to Data Using LINQ Sources - ASP.NET DataGrid Control">
            <Description>
            </Description>
        </Demo>
        <Demo Text="Thông tin đợt thi" NavigateUrl="~/dt/aab.aspx" Title="Handle Large Datasets, Bind Using LINQ - Grid and Editors for ASP.NET">
            <Description>
            </Description>
        </Demo>
      <Demo Text="Thông tin ca thi" NavigateUrl="~/dt/ServerMode.aspx" Title="Handle Large Datasets, Bind Using LINQ - Grid and Editors for ASP.NET">
        <Description>
        </Description>
      </Demo>
    </DemoGroup>
  
    <DemoGroup Text="Hồ sơ thí sinh" ImageUrl="~/Images/TitleImages/GridView.png" ImageWidth="76px" ImageHeight="76px">
        <Demo Text="Tiếp nhận hồ sơ" NavigateUrl="~/hs/FilterRow.aspx" Title="Filter Row - ASP.NET Grid and Data Editors">
            <Description>
           
            </Description>
        </Demo>        
    </DemoGroup>
  
    <DemoGroup Text="Tổ chức đợt thi" ImageUrl="~/Images/TitleImages/GridView.png" ImageWidth="76px" ImageHeight="76px">
        <Demo Text="Phân công coi thi" NavigateUrl="~/tc/Total.aspx" Title="Total Summary Calculation - AJAX DataGrid for ASP.NET">
            <Description>
           
            </Description>
        </Demo>
        <Demo Text="Điểm danh thí sinh" NavigateUrl="~/tc/Group.aspx" Title="Group Summary Calculation - ASP.NET Grid Control">
            <Description>
                <p>
                    A <b>Group summary</b> represents a value of an aggregate function calculated across all data rows within a group.
                </p>
                <p>
                    <b>Group summaries</b> are displayed within group rows.
                </p>
                <p>
                    The ASPxGridView stores its group summaries within the <b>GroupSummary</b> collection. Individual items are represented by <b>ASPxSummaryItem</b> objects.
                </p>
            </Description>
        </Demo>      
    </DemoGroup>

  
  <!--Phầm Menu Cho Tutorials Không  sữa phần này nhé -->
  
    <DemoGroup Text="Tutorials Data Editors">
    <Demo Text="Masked Input" NavigateUrl="~/DemoEditors/MaskedInput.aspx" Title="Client-side Masked Input" IsNew="false">
      <Description>
        <p>
          The DevExpress editors allow you to use masks during editing. Masks are useful when a string entered by an end-user into an editor should match a specific format. For instance, a text editor should accept date/time values in the 24-hour format only, or only numeric values, or a phone number that only allows an end-user to enter digits into automatically constructed placeholders.
        </p>
        <p>
          Within the ASPxEditors library, masked input is supported by the following editor types:
        </p>
        <ul>
          <li>
            Text box editors (in particular, the <b>ASPxTextBox</b> and <b>ASPxButtonEdit</b>).<br />
            A text box mask settings can be accessed via the <b>MaskSettings</b> property.  The editors mask can be specified via the <b>MaskSettings.Mask</b> property.
          </li>
          <li>
            Date editors (<b>ASPxDateEdit</b>).<br />
            To enable masked input within a date editor, the <b>UseMaskBehavior</b> property should be set to true. The mask can be defined via the <b>EditFormatString</b> property, if the <b>EditFormat</b> property is set to <b>Custom</b>.
          </li>
        </ul>
        <p>
          See how masked input behavior is implemented in this demo to facilitate entering different types of data into the forms editors.
        </p>
      </Description>
    </Demo>
    <Demo Text="Filter Control" NavigateUrl="~/DemoEditors/FilterBuilder.aspx" Title="ASP.NET Filter Control - ASP.NET AJAX Controls and Editors">
      <Description>
        <p>
          This demo demonstrates a stand-alone emulation of the ASPxGridView’s built-in <b>Filter Control</b>, which can also be used to create complex criteria.
        </p>
        <p>
          In this demo, to apply the filter, click the 'Apply' button. This calls the Filter Control's <b>Apply()</b> method. When applied, the Filter Control's Applied client-side event is handled to filter the ASPxGridView's data.
        </p>
        <p>
          <b>End-User Capabilities</b>:
        </p>
        <p>
          <b>Add/Remove Conditions</b><br/>
          To create and customize filter criteria, use the
          <img src="../App_Themes/Glass/DemoEditors/fcadd.png" alt="(+)" title="" />
          and
          <img src="../App_Themes/Glass/DemoEditors/fcremove.png" alt="(x)" title="" />
          buttons.
        </p>
        <p>
          <b>Change a Column in a Filter Condition</b><br/>
          To change a condition's column, invoke the column list and choose the required column.
        </p>
        <p>
          <b>Change an Operator in a Filter Condition</b><br/>
          To change a condition's operator, invoke the operator list and choose the required operator.
        </p>
        <p>
          <b>Edit a Condition's Value</b><br/>
          To edit a condition's value, click the operand value and type text. To discard changes to the value and close the active edit box, press ESC.
        </p>
      </Description>
    </Demo>
    <Demo Text="ASPxCalendar (Blog Archive)" NavigateUrl="~/DemoEditors/CalendarNotes.aspx" Title="ASP.NET Calendar, Blog Archive - Data Editors for ASP.NET AJAX">
      <Description>
        <p>
          This demo illustrates how the ASPxCalendar's <strong>DayRender</strong> event can be used to conditionally change the manner of rendering calendar days within a single month. In this sample, a calendar represents information about notes scheduled on October. A list of October notes is stored within an xml file. Calendar days, which correspond to one or more associated notes, are represented as hyperlinks. A click on a hyperlink sends a callback to the server to obtain the corresponding note information. The obtained information is then displayed within a popup window.
        </p>
      </Description>
    </Demo>
    <Demo Text="ASPxCombobox Features" NavigateUrl="~/DemoEditors/ComboboxFeatures.aspx" Title="ASP.NET Combo Box - ASP.NET AJAX Editors">
      <Description>
        <p>
          This demo describes some of the features provided by the <b>ASPxCombobox</b> editor.
        </p>
        <p>
          If the <b>EnableIncrementalFiltering</b> property is set to true, the ASPxCombobox filters its items dynamically, based upon the first letters entered by an end-user into the editor's input box on the client side.

        </p>
        <p>
          The ASPxCombobox enables its items to be loaded from the server on demand, via callbacks if its <b>EnableCallbackMode</b> property is set to true. In this mode, the <b>CallBackPageSize</b> property defines the number of items to be obtained from the server each time it's required.
        </p>

      </Description>
    </Demo>
    <Demo Text="ASPxCombobox (Populating on the Fly)" NavigateUrl="~/DemoEditors/ComboboxClientAPI.aspx" Title="Programmatically Populate a Combo Box - ASP.NET ComboBox Editor">
      <Description>
        <p>
          The <b>APSxCombobox</b> control allows its content (item list) to be updated via callbacks by using the <b>PerformCallback</b> client method. In this demo, the <b>City</b> combo box is populated on the fly with city names that correspond to the currently selected country from the <b>Country</b> combo box.
        </p>
      </Description>
    </Demo>
    <Demo Text="ASPxComboBox (Multiple Columns)" NavigateUrl="~/DemoEditors/ComboBoxMultiColumn.aspx" Title="Multi-Column Data Representation - ASP.NET ListBox/ComboBox Editor" IsNew="false">
      <Description>
        <p>
          The <b>ASPxComboBox</b> and <b>ASPxListBox</b> editors allow their list data to be represented in several columns.
          The multi-column mode is in effect only for editors that obtain their items from a data source.
          An editor's column collection can be defined and customized through the <b>Columns</b> property.
          Each column within this collection should be bound to a data source field via the <b>FieldName</b> property.
          You can also define a column's header caption, width, visibility state and other settings via column properties.
        </p>
        <p>
          For the <b>ASPxComboBox</b> control, all its advanced features, such as incremental filtering, and loading items on
          demand via callbacks, are supported in multi-column mode. The selected item is represented within the <b>ASPxComboBox</b>
          editor's edit box using a value whose format is based upon the <b>TextFormatString</b> property's setting.
        </p>
      </Description>
    </Demo>
    <Demo Text="ASPxProgressBar" NavigateUrl="~/DemoEditors/ProgressBar.aspx" Title="ASP.NET ProgressBar - Data Editors for ASP.NET AJAX" IsNew="false">
      <Description>
        <p>
          This demo illustrates how a progress bar column can be displayed within the <b>ASPxGridView</b> control.
        </p>
        <p>
          The grid contains a column of the <b>GridViewDataProgressBarColumn</b> type. This column displays a progress bar, which provides end-users with the percentage representation of a column value based upon the minimum and maximum value limits defined by the column's <b>ProgressBarProperies.Minimun</b> and <b>ProgressBarProperies.Maximum properties</b>.
          The availability of a percentage value displayed within column progress bars can be controlled by using the <b>ProgressBarProperies.ShowPosition</b> property.
        </p>
      </Description>
    </Demo>
    <Demo Text="ASPxButton Appearances" NavigateUrl="~/DemoEditors/Button.aspx" Title="ASP.NET Button Appearance - Data Editors and Controls for ASP.NET">
      <Description>
        <p>
          The ASPxButton control allows its contents to be represented by an image, or text, or image with text. This sample demonstrates the following different kinds of ASPxButton's content representation:
        </p>

        <ul>
          <li>
            <strong>Image</strong> - The whole button is represented by a single image. The image is specified by the <strong>Image.Url</strong> property; its size is controlled by the <strong>Image.Width</strong> and <strong>Image.Height</strong> properties. The <strong>Text</strong> property of a button control is not set.
          </li>

          <li>
            <strong>Image and Text</strong> - A button's content is represented using the combination of an image and text. The image is defined via the <strong>Image.Url</strong> property; the text is specified by the <strong>Text</strong> property. The <strong>ImagePosition</strong> property is used to control the image's position with respect to the text.
          </li>

          <li>
            <strong>Background Image and Text</strong> - The <strong>Text</strong> property is used to specify a button's display text. The background image of the button is defined using the <strong>BackgroundImage.ImageUrl</strong> property. In this case, the button's <strong>Cursor</strong> and <strong>ForeColor</strong> properties are additionally used to specify the cursor displayed when the mouse hovers over the button and the displayed text's color.
          </li>

          <li>
            <strong>Native</strong> - The ASPxButton control is rendered as a native HTML button input element. This mode is controlled by the button's <strong>Native</strong> property set to true. The button's text is defined via the <strong>Text</strong> property.
          </li>
        </ul>
      </Description>
    </Demo>
    <Demo Text="ASPxButton Features" NavigateUrl="~/DemoEditors/ButtonFeatures.aspx" Title="ASP.NET Button Features - Controls and Editors for ASP.NET">
      <Description>
        <p>
          This sample demonstrates the ASPxButton's client-side support for the checked and disabled states.
        </p>

        <p>
          The checked state of the ASPxButton is initially controlled by the server <strong>Checked</strong> property and can be changed on the client side via the <strong>SetChecked</strong> client method. To specify a grouping of button controls to create a mutually exclusive set of buttons, the <strong>GroupName</strong> property can be used. When this property is set, only one ASPxButton in the specified group can be checked at a time.
        </p>

        <p>
          The availability of the ASPxButton to end-users, which is initially set via the server-side <strong>Enabled</strong> property, can be dynamically changed on the client using the <strong>SetEnabled</strong> client method.
        </p>
      </Description>
    </Demo>

    <Demo Text="ASPxSpinEdit" NavigateUrl="~/DemoEditors/SpinEdit.aspx" Title="ASP.NET Spin Editor - Data Editors for ASP.NET AJAX">
      <Description>
        <p>
          This demo illustrates the primary features of the ASPxSpinEdit.
        </p>

        <p>
          The ASPxSpinEdit control enables your end-users to edit numeric values with ease by clicking small or large increment buttons. The visibility of these spin buttons is controlled by the <strong>SpinButtons.ShowIncrementButtons</strong> and <strong>SpinButtons.ShowLargeIncrementButtons</strong> properties. To define the position of spin button within the editor, the <strong>SpinButtons.Position</strong> property can be used. The increments with which the editor's value is changed when a small or large spin button is clicked can be defined by using the <strong>Increment</strong> and <strong>LargeIncrement</strong> properties respectively.
        </p>

        <p>
          The ASPxSpinEdit can function in float or integer editing mode, which is controlled by the <strong>NumberType</strong> property. In integer mode (when the <strong>NumberType</strong> property is set to <strong>Integer</strong>), float value input is disabled and float values displayed within the editor are automatically rounded after they has been modified. In float mode, culture specific separators are supported, allowing decimal separators to display uniquely in various cultures. The number of decimal places can be defined using the <strong>DecimalPlaces</strong> property.
        </p>

        <p>
          The minimum and maximum allowed values can be defined via the <strong>MinValue</strong> and <strong>MaxValue</strong> properties, which enables end-user input to be limited by the specified range.
        </p>
      </Description>
    </Demo>
    <Demo Text="Data Binding" NavigateUrl="~/DemoEditors/DataBinding.aspx" Title="Bind Editors to Data - ASP.NET Data Editors">
      <Description>
        <p>
          This demo illustrates how different types of editors can be bound to data using standard data-binding
          expressions when residing within a <b>Detail View</b> control's templates. In the binding expressions,
          the <b>Eval</b> and <b>Bind</b> methods are used to bind editors to specific data field values
          and submit data changes made within the editor back to the database.
        </p>
        <p>
          Note that the combo box editor used in this demo is additionally bound to a separate data source from
          which its item list is obtained dynamically.
        </p>
        <p>
          Determine the manner in which editors are validated, using their built-in validation means.
        </p>
      </Description>
    </Demo>
    <Demo Text="Validation" NavigateUrl="~/DemoEditors/Validation.aspx" Title="Client-side and Server-side Data Validation - ASP.NET Data Editors">
      <Description>
        <p>
          The ASPxGridView and Editors Library provide a powerful and seamless way to perform data validation both on the client and server.
        </p>

        <p>
          Different validation settings can be customized for an editor using specific properties available via the editor's <strong>ValidationSettings</strong> property.
        </p>

        <p>
          To define editor validation logic, the following easy-to-use means are provided (which can be combined together, if required):
        </p>

        <ul>
          <li>
            The <strong>ValidationSettings.RequiredField</strong> property can be used to force an editor to require input, and give you the ability to display an error message if input is not received.
          </li>

          <li>
            The <strong>ValidationSettings.RegularExpression</strong> property allows you to validate an editor's value based upon a regular expression.
          </li>

          <li>
            An editor's <strong>Validation</strong> event can be handled on either the client or server (or both) to setup editor validation. Review the code sample tabs within this demo to learn how easy this really is.
          </li>
        </ul>
        <p>
          In this demo the validation check is triggered by clicking on the 'OK' ASPxButton control or
          by moving input focus out of the editor (if the <strong>ValidationSettings.ValidateOnLeave</strong>
          option is enabled).
        </p>

        <p>
          When an editor fails validation logic, the following can be displayed:
        </p>

        <ul>
          <li>
            Error image - To define an error image, use the <strong>ValidationSettings.ErrorImage</strong> property.
          </li>

          <li>
            Error text - The text can be specified by using either the <strong>ValidationSettings.ErrorText</strong> property or in the <strong>Validation</strong> event's handler.
          </li>

          <li>
            A specific error frame near the editor -  The error frame's appearance is customized via the
            <strong>ValidationSettings.ErrorFrameStyle</strong> property. You can also use the
            <strong>ValidationSettings.Display</strong> property to control how the error frame
            occupies its space around the editor.
          </li>

          <li>
            Other similar settings can also be customized via the <strong>ValidationSettings</strong> property.
          </li>
        </ul>

        <p>
          Input focus can be forced back to the editor's input region. The <strong>ValidationSettings.SetFocusOnError</strong> property controls the change in input focus.
        </p>

        <p>
          This demo illustrates the built-in flexibility and efficiency of our validation engine, allowing you to easily implement different validation scenarios without using additional validator controls.
        </p>
      </Description>
    </Demo>
    <Demo Text="Native Mode" NavigateUrl="~/DemoEditors/NativeMode.aspx" Title="Native Rendering - ASP.NET Data Editors">
      <Description>
        <p>
          By default, most editors from the ASPxGridView and Editor Library are rendered using a specifically designed custom layout implemented with the help of standard HTML elements, such as HTML TABLEs, DIVs, SPANs, etc. This allows an editor's appearance to be fully customized by applying a specific style to each composite element of the editor.
        </p>
        <p>
          In some cases, the application logic might require representing editors as native HTML INPUT elements of the corresponding types. This demo illustrates how our editors (such as the ASPxTextBox, ASPxMemo, ASPxListBox, ASPxComboBox and ASPxButton) support native rendering. In order to use an editor in native mode, set the Native property to true. In native mode, an editor's render size may be significantly reduced, which improves the editor's overall performance.
        </p>
      </Description>
    </Demo>
    <Demo Text="Enable On Client" NavigateUrl="~/DemoEditors/EnableOnClient.aspx" Title="Disable Editors on the Client Side - ASP.NET AJAX Data Editors">
      <Description>
        <p>
          This demo illustrates how an editor's availability to an end-user can be controlled on the client side, using the client SetEnabled method.
        </p>
        <p>
          In this sample, the Product combo box becomes enabled when any technology is selected within the Technology combo box. And appropriately, the Version combo is enabled after selecting any product within the Product combo.
        </p>
      </Description>
    </Demo>
  </DemoGroup>

    <DemoGroup Text="Tutorials GridView" ImageUrl="~/Images/TitleImages/GridView.png" ImageWidth="76px" ImageHeight="76px">
      <Demo Text="Filter Row" NavigateUrl="~/DemoGridView/FilterRow.aspx" Title="Filter Row - ASP.NET Grid and Data Editors">
        <Description>
          <p>
            The <b>Filter Row</b> allows end-users to filter data by entering text within its cells.
          </p>
          <p>
            Set the <b>Settings.ShowFilterRow</b> property to <b>true</b> to display a filter row within the ASPxGridView.
          </p>
          <p>
            Enable the 'Show Filter Row Menu' check box to allow end-users select one of the nine filter conditions via the context menu, which is invoked by clicking a filter row button.
          </p>
        </Description>
      </Demo>
      <Demo Text="Header Filter" NavigateUrl="~/DemoGridView/HeaderFilter.aspx" Title="Excel Style Data Filtering - AJAX Grid Control for ASP.NET">
        <Description>
          <p> Column headers can display filter buttons. Clicking a filter button invokes a filter dropdown, which lists unique values within a column, and enables you to apply filter criteria against this column.</p>
          <p>
            By default, these buttons are hidden. To show filter buttons, set the <b>Settings.ShowHeaderFilterButton</b> property to <b>true</b>.
          </p>
          <p>
            The ASPxGridView allows you to create custom filter values, define a filter criteria for them and display these values within a column's filter dropdown. To do this, handle the <b>HeaderFilterFillItems</b> event. In this demo, custom filter values are displayed within the 'Total' and 'Quantity' columns' filter dropdowns.
          </p>
        </Description>
      </Demo>
      <Demo Text="Filter Control" NavigateUrl="~/DemoGridView/FilterBuilder.aspx" Title="Filter Control - ASP.NET AJAX Grid Control">
      <Description>
        <p>
          The <b>Filter Control</b> allows end-users to build complex filter criteria with an unlimited number of filter conditions, combined by logical operators.
          End-users can open the <b>Filter Control</b> by clicking the image or filter expression link displayed within the Filter Bar.
        </p>
        <p>
          <b>Add/Remove Conditions</b>
          <br />
          To create and customize filter criteria, use the
          <img src="../App_Themes/Glass/Editors/fcadd.png" alt="(+)" title="" />
          and
          <img src="../App_Themes/Glass/Editors/fcremove.png" alt="(x)" title="" />
          buttons.
        </p>
        <p>
          <b>Change a Column in a Filter Condition</b>
          <br />
          To change a condition's column, invoke the column list and choose the required column.
        </p>
        <p>
          <b>Change an Operator in a Filter Condition</b>
          <br />
          To change a condition's operator, invoke the operator list and choose the required operator.
        </p>
        <p>
          <b>Edit a Condition's Value</b>
          <br />
          To edit a condition's value, click the operand value and type text. To discard changes to the value and close the active edit box, press ESC.
        </p>
      </Description>
    </Demo>
      <Demo Text="Edit Modes" NavigateUrl="~/DemoGridView/EditModes.aspx" Title="Data Editing UI - Grid and Editors for ASP.NET">
        <Description>
          <p>
            This demo describes the ASPxGridView's built-in <b>edit modes</b>.
          </p>
          <p>
            Use the '<b>Edit Mode</b>' combo box to select the edit mode you desire.
          </p>
          <p>
            The <b>KeyFieldName</b> property must be specified to enable data editing/inserting/deleting operations.
          </p>
          <p>
            The following members can be used to manipulate data:
          </p>
          <ul>
            <li>
              <b>StartEdit()</b> - starts editing.
            </li>
            <li>
              <b>UpdateEdit()</b> - saves changes.
            </li>
            <li>
              <b>CancelEdit()</b> - cancels changes.
            </li>
            <li>
              <b>AddNew()</b> - adds a new row.
            </li>
            <li>
              <b>DeleteRow()</b> - deletes a row.
            </li>
          </ul>
          <p>
            To allow end-users to manipulate data, add a <b>Command column</b> to the view's <b>Columns</b> collection and specify which commands can be used by end-users. There are six command items:
          </p>

          <ul>
            <li>
              New
            </li>
            <li>
              Edit
            </li>
            <li>
              Delete
            </li>
            <li>
              Select
            </li>
            <li>
              Update
            </li>
            <li>
              Cancel
            </li>
          </ul>
          <p>
            By default, a command item is represented by a link. It can also be represented by a button or image. Its representation is specified by the column's <b>ButtonType</b> property.
          </p>
        </Description>
      </Demo>
      <Demo Text="Edit Form" NavigateUrl="~/DemoGridView/EditForm.aspx" Title="Edit Form - ASP.NET Grid and Data Editors">
        <Description>
          <p>
            This demo shows our <b>Edit Form</b> that allows end-users to edit cell values. To learn how to make this form available, review the <b>Edit Modes</b> demo.
          </p>
          <p>
            The <b>Edit Form</b> displays edit cells that correspond to data columns. Each cell displays a column caption and the corresponding editor.
          </p>
          <p>
            Use the data column's <b>EditFormSettings</b> property to specify the corresponding edit cell's position within the <b>Edit Form</b>.
          </p>
          <p>
            In this demo, the 'Show Memo at Bottom' check box controls the position of an edit cell that displays an employee's details. Note this edit cell corresponds to the data column, which is hidden from the ASPxGridView.
          </p>
          <p>The New Item row can be displayed below data rows. Toggle the 'Show new item row at bottom' check box to change the row’s position within the ASPxGridView.</p>
        </Description>
      </Demo>
      <Demo Text="Edit Form Template" NavigateUrl="~/DemoGridView/EditFormTemplate.aspx" Title="ASP.NET Template for Edit Form - AJAX Grid Control for ASP.NET">
        <Description>
          <p>
            The ASPxGridView allows you to provide any possible layout for its Edit Form using the appropriate template.
          </p>
          <p>
            In this demo, we are using our ASPxPageControl to reduce the space occupied by the <b>Edit Form</b>.
          </p>
          <p>
            <b>Important Note</b>
          </p>
          <p>
            To display the edit cells, within the regular <b>Edit Form</b>, create an ASPxGridViewTemplateReplacement control and set its <b>ReplacementType</b> to 'EditFormEditors'.
          </p>
        </Description>
      </Demo>
      <Demo Text="Popup Edit Form" NavigateUrl="~/DemoGridView/PopupEditForm.aspx" Title="Data Editing via Popup Window - AJAX DataGrid for ASP.NET">
        <Description>
          <p>
            The <b>Popup Edit Form</b> allows end-users to edit cell values. In this mode, you can display images and memo data together with in-line editing. As such, page constraints are used more effectively.
          </p>
          <p>
            To enable the <b>Popup Edit Form</b> mode, set the ASPxGridView's <b>Settings.Mode</b> option to <b>PopupEditForm</b>.
          </p>
          <p>
            The Popup Edit Form can also be displayed as a modal dialog. In this mode, the edit form must be closed before you can continue working with the application. This is controlled by the <b>SettingsEditing.PopupEditFormModal</b> option.
          </p>
          <p>In this demo, this behavior is controlled by the 'Show popup edit form in modal mode' check box.</p>
        </Description>
      </Demo>
      <Demo Text="Popup Edit Form Template" NavigateUrl="~/DemoGridView/PopupEditFormTemplate.aspx" Title="ASP.NET Template for Popup Edit Form - ASP.NET Grid Control">
        <Description>
          <p>
            The ASPxGridView allows you to provide any possible layout for its <b>Popup Edit Form</b> using the appropriate template.
          </p>
          <p>
            In this demo, we are using our ASPxPageControl to reduce the space occupied by the <b>Popup Edit Form</b>.
          </p>
          <p>
            <b>Important Note</b>:
          </p>
          <p>
            To display the edit cells, within the <b>Popup Edit Form</b>, create an <b>ASPxGridViewTemplateReplacement</b> control and set its <b>ReplacementType</b> to 'EditFormEditors'.
          </p>
        </Description>
      </Demo>
      <Demo Text="Two-Way Binding" NavigateUrl="~/DemoGridView/TwoWayBinding.aspx" Title="Two-Way Template Binding - ASP.NET AJAX Grid and Editors">
        <Description>
          <p>
            This demo shows how you can implement "Two-Way Data Binding" - a new data access model introduced in ASP.NET 2.0. This model allows you to both read and update data.
          </p>
          <p>
            In this demo, editors contained within the Edit Form's template use the Bind method to retrieve and update the values of data-bound fields. This method takes the name of a data field to associate with a bound property.
          </p>
        </Description>
      </Demo>
      <Demo Text="Populate a Combo Box on the Fly" NavigateUrl="~/DemoGridView/FillComboOnFly.aspx" Title="Dynamically Populate Combo Box - Grid and Editors for ASP.NET">
        <Description>
          <p>
            In this demo, the City column's combo box is populated dynamically (via callbacks) with city names, depending upon the country selected within the Country column's combo box. Note that only the City combo box' content is updated during round-trips to the server - not the content of the entire page or ASPxGridView control.
          </p>
          <p>
            The Country combo box' <b>SelectedIndexChanged</b> client-side event is handled to send a request for updating the City combo box. On the server side the <b>Callback</b> event is handled to populate the City combo box with required items.
          </p>
        </Description>
      </Demo>
      <Demo Text="Validation" NavigateUrl="~/DemoGridView/Validation.aspx" Title="Input Validation - ASP.NET Grid and Data Editors">
        <Description>
          <p>
            The ASPxGridView allows you to manually validate the edited row and display errors for invalid fields.
          </p>
          <p>
            This demo illustrates ways in which you can include data validation in your next ASP.NET project. Validation is implemented within the RowValidating event handler. Invalid values are indicated via error icons. Hovering your mouse over the icon displays a hint along with a description of the error.
          </p>
          <p>
            To indicate rows with invalid data, the <b>HtmlRowPrepared</b> event is handled. This event is raised for each data row when the corresponding row within the table has been created. In this sample, rows with invalid data are painted red.
          </p>
        </Description>
      </Demo>
      <Demo Text="Focused Row" NavigateUrl="~/DemoGridView/FocusedRow.aspx" Title="Input Validation - ASP.NET Grid and Data Editors">
        <Description>
          <p>
            The ASPxGridView allows you to manually validate the edited row and display errors for invalid fields.
          </p>
          <p>
            This demo illustrates ways in which you can include data validation in your next ASP.NET project. Validation is implemented within the RowValidating event handler. Invalid values are indicated via error icons. Hovering your mouse over the icon displays a hint along with a description of the error.
          </p>
          <p>
            To indicate rows with invalid data, the <b>HtmlRowPrepared</b> event is handled. This event is raised for each data row when the corresponding row within the table has been created. In this sample, rows with invalid data are painted red.
          </p>
        </Description>
      </Demo>
      <Demo Text="Selection Row" NavigateUrl="~/DemoGridView/Selection.aspx" Title="Input Validation - ASP.NET Grid and Data Editors">
        <Description>
          <p>
            The ASPxGridView allows you to manually validate the edited row and display errors for invalid fields.
          </p>
          <p>
            This demo illustrates ways in which you can include data validation in your next ASP.NET project. Validation is implemented within the RowValidating event handler. Invalid values are indicated via error icons. Hovering your mouse over the icon displays a hint along with a description of the error.
          </p>
          <p>
            To indicate rows with invalid data, the <b>HtmlRowPrepared</b> event is handled. This event is raised for each data row when the corresponding row within the table has been created. In this sample, rows with invalid data are painted red.
          </p>
        </Description>
      </Demo>
      <Demo Text="Multi Selection Row" NavigateUrl="~/DemoGridView/MultiSelection.aspx" Title="Input Validation - ASP.NET Grid and Data Editors">
        <Description>
          <p>
            The ASPxGridView allows you to manually validate the edited row and display errors for invalid fields.
          </p>
          <p>
            This demo illustrates ways in which you can include data validation in your next ASP.NET project. Validation is implemented within the RowValidating event handler. Invalid values are indicated via error icons. Hovering your mouse over the icon displays a hint along with a description of the error.
          </p>
          <p>
            To indicate rows with invalid data, the <b>HtmlRowPrepared</b> event is handled. This event is raised for each data row when the corresponding row within the table has been created. In this sample, rows with invalid data are painted red.
          </p>
        </Description>
      </Demo>
      <Demo Text="Advanced Selection Row" NavigateUrl="~/DemoGridView/SelectionAdv.aspx" Title="Input Validation - ASP.NET Grid and Data Editors">
        <Description>
          <p>
            The ASPxGridView allows you to manually validate the edited row and display errors for invalid fields.
          </p>
          <p>
            This demo illustrates ways in which you can include data validation in your next ASP.NET project. Validation is implemented within the RowValidating event handler. Invalid values are indicated via error icons. Hovering your mouse over the icon displays a hint along with a description of the error.
          </p>
          <p>
            To indicate rows with invalid data, the <b>HtmlRowPrepared</b> event is handled. This event is raised for each data row when the corresponding row within the table has been created. In this sample, rows with invalid data are painted red.
          </p>
        </Description>
      </Demo>
     
    </DemoGroup>
   
    <DemoGroup Text="Tutorials Popup" ImageUrl="~/Images/TitleImages/PopupControl.png" Title="PopupControl">
    <Demo Text="Data Binding" NavigateUrl="~/DemoPopup/DataBinding.aspx" Title="Data Binding - ASP.NET Popup Control">
      <Description>
        <p>
          This demo illustrates how the <b>ASPxPopupControl</b> can be bound to a data source. The <b>ASPxPopupControl</b> supports standard data binding. In this instance, any object which implements the <b>IListSource</b>, <b>IEnumerable</b> or <b>IDataSource</b> interface (e.g. <b>SqlDataSource</b>, <b>XmlDataSource</b>) may be used as a data source for this control.
        </p>
        <p>
          In this demo, the popup control is bound to a standard <b>XmlDataSource</b> type data source. It supplies the popup control with data from a specific Charts.xml file. The <b>ASPxPopupControl</b> requires data to be represented as the contents of different elements within popup windows. Use the <b>XPath</b> property to obtain the desired data sample.
        </p>
        <p>
          Our web controls provide you with the ability to bind the properties of controls that compose a template directly to the properties of the corresponding data object (<b>DataItem</b>) from the bound data source. To implement, the <b>Container.Item.DataItem</b> property or the <b>Container.EvalDataItem(&lt;expression&gt;)</b> method can be used.
        </p>
        <p>
          In this demo, the contents of each popup window are defined by placing a standard <b>Image</b> web control onto a <b>WindowContentTemplate</b> type template. The <b>ImageUrl</b> propety of the <b>Image</b> control is bound directly to the <b>XmlDataSource</b>'s node by using the <b>Container.EvalDataItem(&lt;expression&gt;)</b> method. (See ASPX code)
        </p>
        <p>
          The window's footer is defined via the <b>WindowFooterTemplate</b> by using the <b>Label</b> web control whose <b>Text</b> property binds to the data of the corresponding xml node using the <b>Container.EvalDataItem(&lt;expression&gt;)</b> method. (See ASPX code)
        </p>
      </Description>
    </Demo>
    <Demo Text="Features" NavigateUrl="~/DemoPopup/Features.aspx" Title="Popup Control Features - ASP.NET Popup Window Control">
      <Description>
        <p>
          This demo describes some of the features provided by the <b>ASPxPopupControl</b>. Use the items in the far right panel to change the values of the popup control's properties.
        </p>
        <p>
          The <b>ShowCloseButton</b> property specifies whether a specific button is displayed within the popup window's header allowing end-users to close the window.
        </p>
        <p>
          The <b>ShowShadow</b> property set to <b>true</b> specifies that the popup window is displayed with a specific shadow effect.
        </p>
        <p>
          The visibility of the popup window's header and footer is controlled by the <b>ShowFooter</b> and <b>ShowHeader</b> properties respectively.
        </p>

        <p>
          The <b>PopupHorizontalAlign</b> property controls the horizontal alignment of the popup window relative to the corresponding web control/HTML element. This property can be set to the following values:
          <b>NotSet</b> (the popup window is displayed on the x-coordinate of the mouse cursor position),
          <b>OutsideLeft</b> (the popup window is displayed to the left of the corresponding HTML element so that the x-coordinate of the window's right border equals the x-coordinate of the element's left border),
          <b>LeftSides</b> (the popup window is displayed so that the left border x-coordinates of the window and its corresponding element are equal),
          <b>RightSides</b> (the popup window is displayed so that the right border x-coordinates of the window and its corresponding element are equal),
          <b>OutsideRight</b> (the popup window is displayed to the right of the corresponding HTML element so that the x-coordinate of the window's left border equals the x-coordinate of the element's right border).
        </p>
        <p>
          The <b>PopupVerticalAlign</b> property allows you to control the vertical alignment of the popup window with respect to the corresponding web control/HTML element. The following property values are available:
          <b>NotSet</b> (the popup window is displayed on the y-coordinate of the mouse cursor position),
          <b>Above</b> (the popup window is displayed above the corresponding HTML element so that the y-coordinate of the window's bottom border equals the y-coordinate of the element's top border),
          <b>TopSides</b> (the popup window is displayed so that the top border y-coordinates of the window and its corresponding element are equal to one another),
          <b>BottomSides</b> (the popup window is displayed so that the bottom border y-coordinates of the window and its corresponding element are equal),
          <b>Below</b> (the popup window is displayed below the corresponding HTML element so that the y-coordinate of the window's top border equals the y-coordinate of the element's bottom border).
        </p>
        <p>
          The horizontal and vertical offsets of the popup window can be specified by the <b>PopupHorizontalOffset</b> and <b>PopupHorizontalOffset</b> properties respectively.
        </p>
        <p>The Opacity property allows defining a level of transparency for the popup window and its controls. This property can be set to a value from 0 (the window is transparent and so it's completely invisible) to 100 (the window is opaque).</p>

        <p>
          The <b>EnableAnimation</b> property enables or disables a specific predefined animation effect used to invoke the popup control.
        </p>
        <p>
          The <b>AllowDragging</b> property allows you to control whether the popup control's window can be dragged within the bounds of the client browser's window.
        </p>
        <p>
          The <b>DragElement</b> property specifies which part of the popup window can be dragged to move the window within the page. Two variants are available: header dragging (the window can be moved only by dragging its header), and window dragging (the window can be moved by clicking anywhere within its client area, holding down the mouse button and then moving the mouse cursor).
        </p>
        <p>
          The <b>AllowResize</b> property allows you to enable (true) or disable (false) the resizing feature of the <b>ASPxPopupControl</b>. This feature is coupled with the <b>ResizingMode</b> and <b>ShowSizeGrip</b> property settings.
        </p>
        <p>
          The <b>ResizingMode</b> property controls whether the popup window is redrawn dynamically during the resizing operation (the Live value), or the window is redrawn after the resizing operation is finished (the Postponed value).
        </p>
        <p>
          The <b>ShowSizeGrip</b> property specifies the visibility of the window's size grip element (the size grip is a special mouse pointer in the lower-right corner of the window that allows a user to click and drag the size grip to resize the window). The size grip can be displayed always (the True value), never (the False value) or dependent upon the <b>AllowResize</b> property setting (the Auto value).
        </p>
        <p>
          The <b>CloseAction</b> property controls the client action that can close the popup control. This property can accept one of the following values:
          <b>None</b> (the popup window can be closed only by a developer via a specific client script method),
          <b>CloseButton</b> (the window can only be closed by pressing the <b>Close</b> button displayed within the window's header),
          <b>OuterMouseClick</b> (the popup window is closed by a click outside the window's region),
          <b>MouseOut</b> (the popup window is closed after the mouse cursor moves out of the window's region).
        </p>
        <p>
          The <b>PopupAction</b> property defines a client action which invokes the popup window. The following values are available for this property:
          <b>None</b> (the popup window can be invoked only by a developer via a specific client script method),
          <b>LeftMouseClick</b> (the window can be shown by a left mouse click on the corresponding web control or HTML element specified via the <b>PopupElementID</b> property),
          <b>RightMouseClick</b> (the window can be shown by a right mouse click on the corresponding web control or HTML element specified via the <b>PopupElementID</b> property),
          <b>MouseOver</b> (the popup window is displayed when the mouse cursor enters the region occupied by the corresponding web control or HTML element specified via the <b>PopupElementID</b> property).
        </p>
        <p>
          The <b>AppearAfter</b> and <b>DissapearAfter</b> properties allow you to specify the display delay in milliseconds. These properties are used if the <b>CloseAction</b> property is set to <b>MouseOut</b> or the <b>PopupAction</b> property is set to <b>MouseOver</b>.
        </p>
      </Description>
    </Demo>
    <Demo Text="Modal Window" NavigateUrl="~/DemoPopup/ModalWindow.aspx" Title="Modal Dialog - ASP.NET AJAX Popup Window Control">
      <Description>
        <p>
          This demo illustrates how the <b>ASPxPopupControl</b>'s popup windows can be used in modal mode. This window mode is useful when it's necessary to display a dialog allowing end-user input to occur only to objects on the modal dialog window. The modal mode's availability can be controlled by using the <b>Modal</b> property of a popup control or specific popup window. An unlimited number of nested modal windows is supported.
        </p>
        <p>In this demo, click the Show Modal Window button to invoke the first modal window dialog. The second modal window can be displayed via a click on the Create Account link within the dialog.</p>
      </Description>
    </Demo>
    <Demo Text="ContentUrl" NavigateUrl="~/DemoPopup/ContentUrl.aspx" Title="HTML Page in Popup Window - Popup Control for ASP.NET AJAX">
      <Description>
        <p>
          The <b>ASPxPopupControl</b> allows display of the contents of other web pages specified by their URLs. In order to load a specific web page into the <b>ASPxPopupControl</b>, the control's <b>ContentUrl</b> property is used.
        </p>
        <p>
          In this demo, the <b>ASPxPopupControl</b>'s <b>ContentUrl</b> property is assigned with the navigation location of a specific web page that emulates a feedback form. The page's contents are loaded into the popup control's window automatically.
        </p>
        <p>
          This demo also illustrates the resizing feature of the <b>ASPxPopupControl</b>. This feature is enabled by setting the <b>AllowResize</b> property to true. The popup control's window can be resized by using the size grip or dragging the window's edges.
        </p>
      </Description>
      <SourceCodeFiles>
        <File Name="~/DemoPopup/ContentUrlFeedForm.aspx.cs" />
        <File Name="~/DemoPopup/ContentUrlFeedForm.aspx.vb" />
        <File Name="~/DemoPopup/ContentUrlFeedForm.aspx" />
      </SourceCodeFiles>
    </Demo>
    <Demo Text="Transparency" NavigateUrl="~/DemoPopup/Transparency.aspx" Title="Transparency - ASP.NET AJAX Popup Control">
      <Description>
        <p>
          The <b>ASPxPopupControl</b> supports the Transparency feature, which means you can create custom-shaped popup windows. For this purpose, set the control's <b>BackColor</b> property to Transparent and provide the appropriate background image.
        </p>
        <p>
          In this demo, puzzle elements are represented by <b>ASPxPopupControl</b> instances. Each puzzle element's shape is defined by a specific partly transparent .png image which is set as a background image of the corresponding popup control (via the control's <b>BackgroundImage</b> property). The <b>BackColor</b> properties of popup controls are set to the <b>Transparent</b> value. In order to enable popup windows to be dragged, the <b>AllowDragging</b> properties are set to <b>True</b> and the <b>DragElement</b> properties are set to <b>Window</b>, within popup controls.
        </p>
      </Description>
    </Demo>
    <Demo Text="Templates" NavigateUrl="~/DemoPopup/Templates.aspx" Title="ASP.NET Templates - Popup Window Control for ASP.NET AJAX">
      <Description>
        <p>
          This sample demonstrates the use of the template technology within the <b>ASPxPopupControl</b>. The look of header and footer elements of a popup control's window can be completely modified by creating a specific template which defines how the corresponding window element will be rendered by a client browser.
        </p>
        <p>
          The template types provided by the <b>ASPxPopupControl</b> and supplemented with the ability to define the contents of the control's window (by using the <b>Controls</b> property or the client <b>SetWindowContentHTML</b> method) allow you to completely customize the popup window's appearance and layout. In this demo, the default popup window functionality is enhanced by specific Help and Close buttons placed in the window's header by using a <b>HeaderTemplate</b> type template. The <b>FooterTemplate</b> type template is used to define the color palette (that allows the background color of the window's content to be changed) and display text (which is displayed or hidden dynamically in response to a click on the Help button).
        </p>
      </Description>
    </Demo>
    <Demo Text="Client-Side Events" NavigateUrl="~/DemoPopup/ClientSide.aspx" Title="Client-Side Events - ASP.NET Popup Window Control">
      <Description>
        <p>This sample demonstrates the capabilities of our client-side event technology. All available client-side events are traced in this demo. Click an icon beside a product name to invoke the corresponding popup control window.</p>
        <p>Client-side events are triggered in response to specific user actions performed on the client side (in particular, when invoking or hiding a popup window). Client-side event handlers represent code written in JavaScript. In order to handle a client-side event, the sender web control provides a property that accepts either code handling directly or the name of a handling function. This function should be defined either directly in the page's HTML code or in a separate js file. For each client-side event, there is a specific object, which has both server-side and client-side representations. This object will automatically render the necessary JavaScript code to the page and assign it as the handler to the web control on the client side.</p>
      </Description>
    </Demo>
    <Demo Text="Client-Side Functionality" NavigateUrl="~/DemoPopup/ClientSideAPI.aspx" Title="Client-Side JavaScript API - Popup Control for ASP.NET AJAX">
      <Description>
        <p>
          This example demonstrates how to manipulate a popup control programmatically on the client using our extended client-side functionality. The client-side programmatic interface is available if the <b>EnableClientSideAPI</b> property is set to true, or if there is a handler assigned to any client-side event.
        </p>
        <p>
          In this demo, each popup control window is identified using its <b>Name</b> property. In order to obtain a specific popup window by its name on the client side, the <b>GetWindowByName</b> method is used. A specific popup window can be invoked or hidden on the client side by using the <b>ShowWindow</b> or <b>HideWindow</b> metod. (See JS code, the <b>SetHintVisible</b> function)
        </p>
        <p>
          In order to show or hide a default window, the <b>Show</b> or <b>Hide</b> method can be used. (See JS code, the <b>SetErrorVisible</b> function)
        </p>
        <p>
          The <b>SetContentHTML</b> method is used in this demo to display the HTML code representing the default popup window's content (see JS code, the <b>SetErrorString</b> function). The content of a specific popup window can be obtained on the client side via the <b>GetWindowContentHTML</b> method and defined via the <b>SetWindowContentHTML</b> method.
        </p>
        <p>
          Note that an individual client control object can be referenced either directly by its <b>ID</b> (for instance, by using the following code: <b>ASPxPopupControl1</b>.IsVisible()) or by using the <b>Get</b> method of a common collection for our ASPx web controls (this can be useful when our web control is contained within a UserControl or MasterPage; that is when the resulting client identificator is generated by a specific naming container). The <b>GetPopupControl</b> function (see JS code) demonstrates how to access a client popup control object via our control collection.
        </p>
      </Description>
    </Demo>
    <Demo Text="Server-Side Functionality" NavigateUrl="~/DemoPopup/ServerSide.aspx" Title="Server-Side Functionality - ASP.NET Popup Control">
      <Description>
        <p>
          This sample demonstrates a few of the <b>ASPxPopupControl</b>'s server-side capabilities. Enter any text into the memo field and click the <b>Create Note</b> button to create and display a popup window containing the text entered.
        </p>
        <p>
          Each newly created popup window overlaps those preceding it. You can drag a window by its header or close the window by clicking the window's <b>Close</b> button. Note that the position and state of a popup window is preserved between postbacks. The code of the <b>Button1_Click</b> event's handler demonstrates how an individual popup window is created and its content text, footer text and position are defined. (See VB or C# code)
        </p>
      </Description>
    </Demo>
  </DemoGroup>
  <DemoGroup Text="Code Mẫu" Visible="true">
    <Demo Text="Địa điểm thi" NavigateUrl="~/DemoGridView/diemthi.aspx" Title="Mẫu Thêm - Xóa - Sữ Địa điểm thi">
      <Description>
        <p>
          Người viết: <br>Đỗ Quốc Khanh</br>
        </p>

      </Description>
      <SourceCodeFiles>
        <File Name="~/App_Code/clsDiaDiemThi_DAL.cs" />
        <File Name="~/App_Code/clsDiaDiemThi_DTO.cs" />
      </SourceCodeFiles>
    </Demo>
  </DemoGroup>
    <DemoGroup Text="" Visible="false">
        <Demo Text="Site Map" NavigateUrl="~/SiteMap.aspx" UseFullTitle="false" Title="Developer Express - ASP.NET GridView Control - Demo Center Site Map">
            <GeneralTerms ShowHeader="false" />
            <Description ShowHeader="false" />
        </Demo>
    </DemoGroup>
</Demos>